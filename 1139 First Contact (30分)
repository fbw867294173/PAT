/*
1 用邻接表只保存同性别的朋友，这样遍历时就可以不关注性别。
2 使用字典保存任意两个人是否为朋友关系，用于判断。mm[abs(stoi(s1)) * 10000 + abs(stoi(s2))]
挺常用的。用于保存两个编号之间的关系。
3 接收朋友关系时用string，还可以判断性别。防止出现-0000。输出时用%04d。
4 对于一对想要在一起的A和B，他们需要先找A的所有同性朋友C，再找B的所有同性朋友D，
当C和D两人是朋友的时候则可以输出C和D。这样解决了层层递进中性别的处理问题。
*/

#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<unordered_map>
using namespace std;

unordered_map<int, int>mat;
vector<int>v[10005];
struct node {
	int a, b;
};
vector<node>ans;

bool cmp(node x, node y) {
	if (x.a != y.a)return x.a < y.a;
	else return x.b < y.b;
}

int main() {
	int n, m, k;
	string a, b;
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		cin >> a >> b;
		if (a.size() == b.size()) {
			v[abs(stoi(a))].push_back(abs(stoi(b)));
			v[abs(stoi(b))].push_back(abs(stoi(a)));
		}
		mat[abs(stoi(a)) * 10000 + abs(stoi(b))] =
			mat[abs(stoi(b)) * 10000 + abs(stoi(a))] = 1;
	}
	cin >> k;
	for (int t = 0; t < k; t++) {
		cin >> a >> b;
		ans.clear();
		for (int i = 0; i < v[abs(stoi(a))].size(); i++) {
			for (int j = 0; j < v[abs(stoi(b))].size(); j++) {
				int ta = abs(stoi(a)), tb = abs(stoi(b));
				if (tb == v[abs(stoi(a))][i] || ta == v[abs(stoi(b))][j])continue;
				if ( mat[v[ta][i] * 10000 + v[tb][j]] == 1) {
					ans.push_back({ v[ta][i] ,v[tb][j] });
				}
			}
		}
		sort(ans.begin(), ans.end(), cmp);
		printf("%d\n", ans.size());
		for (int i = 0; i < ans.size(); i++) {
			printf("%04d %04d\n", ans[i].a, ans[i].b);
		}
	}
	return 0;
}
