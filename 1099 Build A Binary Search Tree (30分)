#include<iostream>
#include<stack>
#include<queue>
#include<algorithm>
using namespace std;

const int maxn = 105;

struct node {
    int left, right;
    int val;
}tree[maxn];
bool vis[maxn];
int v[maxn];
int idx;
void inorder(int root) {
    if (root == -1)return;
    inorder(tree[root].left);
    tree[root].val = v[idx++];
    inorder(tree[root].right);
}

int main() {
    int n;
    cin >> n;
    int a, b;
    for (int i = 0; i < n; i++) {
        cin >> a >> b;
        vis[a] = true; vis[b] = true;
        tree[i].left = a;
        tree[i].right = b;
    }
    int root = 0;
    while (vis[root])root++;
    for (int i = 0; i < n; i++)cin >> v[i];
    sort(v, v + n);
    idx = 0;
    inorder(root);
    queue<int>q;
    q.push(root);
    int cnt = 0;
    while (!q.empty()) {
        int t = q.front();
        q.pop();
        if (cnt > 0)cout << " ";
        cout << tree[t].val;
        cnt++;
        if (tree[t].left != -1)q.push(tree[t].left);
        if (tree[t].right != -1)q.push(tree[t].right);
    }
    cout << endl;
}
